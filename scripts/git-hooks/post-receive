#!/bin/bash
##
# Automatically run asset builds and server restarts after a successful push.
# Intended for installation into production .git/hooks folder so it automates
# actions when doing a 'git push production'.
#
# $ cd .git/hooks; ln -s ../../scripts/git-hooks/post-receive .
##

# This file prepends output with "Seravo:" so that people running 'git push'
# who see their git and SSH output would understand that these lines came from
# something special on the server.
echo "Seravo: running post-receive git hook"

##
# This script can be called from any path so it's good to be in the correct location.
# This can also be called in .git/hooks dir and we need to get into project root.
##
cd "$( dirname "${BASH_SOURCE[0]}" )"/../.. || exit

# Git uses GIT_DIR instead of PWD by default.
# This is still needed in addition to previous 'cd' when pushing to remote.
GIT_DIR="$(pwd)/.git"

# Custom constants
THEME_DIR="$(pwd)/htdocs/wp-content/themes/ihh"
SA_DIR="$(pwd)/service-advisor"
PUBLIC_DIR="$(pwd)/htdocs"
API_URL="https://ihhelsinki.fi-h.seravo.com/wp-json/serviceadvisor/v1/"

# Loop through all changed files, only take pushes to master into consideration.
# If you use some other branch for production, change "refs/heads/master" to
# something else like "refs/heads/yourbranch".
changed_files=""
while read -r oldrev newrev refname; do
  if [ "$refname" = "refs/heads/master" ]; then
    changed_files=$(git diff-tree --name-only -r "$oldrev" "$newrev")
  fi
done

# Check files which have triggers
COMPOSER_CHANGED=false
NGINX_CHANGED=false
while read -r line; do
    if [ "$line" = "composer.json" ] || [ "$line" = "composer.lock" ]; then
      COMPOSER_CHANGED=true
    elif [ "$line" = "nginx/*.conf" ]; then
      NGINX_CHANGED=true
    fi
done <<< "$changed_files"

# Do stuff with the triggers
if $COMPOSER_CHANGED; then
  echo "Seravo: composer.json was updated, installing..."
  composer install --no-dev --no-ansi --no-interaction --no-progress --no-suggest --optimize-autoloader
fi

if $NGINX_CHANGED; then
  echo "Seravo: Nginx configs were changed, reloading nginx..."
  wp-restart-nginx
fi


# If there is a Tideways key set, use it to trigger a release event
if [ -f /data/wordpress/.tideways.key ] && [ ! -z "$(cat /data/wordpress/.tideways.key)" ]
then
  APIKEY=$(cat /data/wordpress/.tideways.key)
  echo "Found Tideways API key: $APIKEY"

  COMMIT_ID=$(git log -n 1 --oneline | cut -d ' ' -f 1)

  PAYLOAD='{"apiKey": "'$APIKEY'", "name": "'$COMMIT_ID'", "type": "release", "environment": "'$WP_ENV'", "service": "web", "compareAfterMinutes":90}'
  echo "$PAYLOAD"

  TIDEWAYS_API_RESULT=$(curl --silent -d "$PAYLOAD"  -X POST https://app.tideways.io/api/events)
  if echo "$TIDEWAYS_API_RESULT" | grep --quiet '"ok":true'
  then
    echo "==> Tideways event registered successfully!"
  else
    echo "==> Tideways event registration failed!"
  fi
fi

# Build the theme & its assets
echo "IHH: Installing theme depencies from composer.json..."
cd $THEME_DIR
composer install --no-dev --no-ansi --no-interaction --no-progress --no-suggest --optimize-autoloader

echo "IHH: Building assets..."
yarn && yarn build:production

echo "SA: Installing deps..."
cd $SA_DIR
yarn

echo "SA: Building Public..."
SKIP_PREFLIGHT_CHECK=true REACT_APP_API_URL=$API_URL REACT_APP_VERSION=public yarn build

echo "SA: Moving Public to destination..."
mv build $PUBLIC_DIR/serviceadvisor

echo "SA: Building Kiosk..."
SKIP_PREFLIGHT_CHECK=true REACT_APP_API_URL=$API_URL REACT_APP_VERSION=service yarn build

echo "SA: Moving Kiosk to destination..."
mv build $PUBLIC_DIR/infokiosk

# On every git push, always flush caches so the server will serve fresh contents
echo "Seravo: Flushing all caches..."
/usr/local/bin/wp-purge-cache
